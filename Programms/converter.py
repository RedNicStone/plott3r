from pyfiglet import Figlet
from clint.textui import puts, indent, colored
from pprint import pprint

f = Figlet(font='cricket')
print(f.renderText('Plott3r'))
print(f.renderText('Gcode Converter'))

indent(4, quote='>>> ')
puts(colored.blue('Importing libaries...'))

from pygcode import *
from pygcode import Machine, Line, split_gcodes
import Tkinter, tkFileDialog

plott3r = Machine()

line = Line()

infile = """%
(Header)
(Generated by gcodetools from Inkscape.)
(Using default header. To add your own header create file "header" in the output dir.)
M3
(Header end.)
G21 (All units in mm)

(Start cutting path id: path815)
(Change tool to Default tool)

G00 Z0.000000
G00 X137.772320 Y218.470245

G01 Z0.000000 F100.0(Penetrate)
G01 X134.434801 Y201.691400 Z0.000000 F400.000000
G01 X124.930349 Y187.466982 Z0.000000
G01 X110.705931 Y177.962530 Z0.000000
G01 X93.927086 Y174.625010 Z0.000000
G01 X77.148241 Y177.962530 Z0.000000
G01 X62.923823 Y187.466982 Z0.000000
G01 X53.419371 Y201.691400 Z0.000000
G01 X50.081852 Y218.470245 Z0.000000
G01 X53.419372 Y235.249090 Z0.000000
G01 X62.923824 Y249.473507 Z0.000000
G01 X77.148241 Y258.977959 Z0.000000
G01 X93.927086 Y262.315479 Z0.000000
G01 X110.705931 Y258.977959 Z0.000000
G01 X124.930348 Y249.473507 Z0.000000
G01 X134.434800 Y235.249090 Z0.000000
G01 X137.772320 Y218.470245 Z0.000000
G01 X137.772320 Y218.470245 Z0.000000
G00 Z0.000000

(End cutting path id: path815)


(Footer)
M5
G00 X0.0000 Y0.0000
M2
(Using default footer. To add your own footer create file "footer" in the output dir.)
(end)
%"""
outfile = """"""

puts(colored.blue('Please select input file...'))

#root = Tkinter.Tk()
#root.withdraw()

#file_path = tkFileDialog.askopenfilename()

gcode = infile

prev_pos = [plott3r.pos.X, plott3r.pos.Y, plott3r.pos.Z, int(str(plott3r.mode.feed_rate)[1:])]

pen_down = False

outfile += ("[")

for gcode_line in gcode.splitlines():

    line.__init__(gcode_line)

    try:
        (befores, (g,), afters) = split_gcodes(line.block.gcodes, (GCodeRapidMove, GCodeLinearMove))
        plott3r.process_gcodes(*sorted(befores))
        plott3r.process_gcodes(g)
        plott3r.process_gcodes(*sorted(afters))
        if isinstance(g, GCodeRapidMove) and pen_down == True:
            outfile += "DrawAction(1), "
            pen_down = False
        elif isinstance(g, GCodeLinearMove) and pen_down == False:
            outfile += "DrawAction(2), "
            pen_down = True
    except:
        (befores, bla, afters) = split_gcodes(line.block.gcodes, (GCodeRapidMove, GCodeLinearMove))
        plott3r.process_gcodes(*sorted(befores))
        plott3r.process_gcodes(*sorted(afters))


    diff_xyz = [plott3r.pos.X - prev_pos[0], plott3r.pos.Y - prev_pos[1], plott3r.pos.Z - prev_pos[2], int(str(plott3r.mode.feed_rate)[1:]) - prev_pos[3]]
    changed = diff_xyz[0] != 0 and diff_xyz[1] != 0 and diff_xyz[1] != 0

    first_argument = True

#    if int(str(plott3r.mode.feed_rate)[1:]) >= 1 and pen_down == False:
#        outfile += "DrawAction(2), "
#        pen_down = True
#
#    if int(str(plott3r.mode.feed_rate)[1:]) <= 1 and pen_down == True:
#        outfile += "DrawAction(1), "
#        pen_down = False

    if changed == True:
        outfile += "DrawAction(3, "

        if diff_xyz[0] != 0:
            first_argument = False
            outfile += "x = " + str(diff_xyz[0])

        if diff_xyz[1] != 0:
            if not first_argument:
                outfile += ", "
            first_argument = False
            outfile += "y = " + str(diff_xyz[1])

        #if diff_xyz[2] != 0:
        #    if not first_argument:
        #        outfile += ", "
        #    first_argument = False
        #    outfile += "z = " + str(diff_xyz[2])

        #if diff_xyz[3] != 0:
        #    if not first_argument:
        #        outfile += ", "
        #    first_argument = False
        #    outfile += "f = " + str(diff_xyz[3])

        outfile += ("), ")


    prev_pos = [plott3r.pos.X, plott3r.pos.Y, plott3r.pos.Z, int(str(plott3r.mode.feed_rate)[1:])]

outfile += ("]")

print(outfile)
